name: Test

on:
  workflow_call: # Only run when called by another workflow

jobs:
  all-tests:
    name: All Tests
    runs-on: ubuntu-latest
    
    # Add Postgres service to prevent connection errors
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: band_db_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: '1.18'
          otp-version: '26'
      
      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}-v2
          restore-keys: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}-v2
      
      - name: Install dependencies
        run: mix deps.get
      
      - name: Restore build cache
        uses: actions/cache@v3
        with:
          path: _build
          key: ${{ runner.os }}-build-${{ hashFiles('**/mix.lock') }}-v2
          restore-keys: ${{ runner.os }}-build-${{ hashFiles('**/mix.lock') }}-v2
      
      - name: Verify PostgreSQL is running
        run: |
          # Install PostgreSQL client
          apt-get update && apt-get install -y postgresql-client
          
          # Output PostgreSQL service status information
          echo "Checking PostgreSQL connection..."
          pg_isready -h localhost -p 5432
          
          echo "Attempting to connect using psql..."
          PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "SELECT 1"
          
          echo "PostgreSQL is running and accessible"
      
      - name: Compile
        run: mix compile --warnings-as-errors
      
      - name: Run unit tests
        run: |
          # Create and migrate database
          mix ecto.create
          mix ecto.migrate
          
          # Run unit tests first
          echo "Running unit tests..."
          mix test --only unit --exclude e2e
        env:
          MIX_ENV: test
          DATABASE_URL: "ecto://postgres:postgres@localhost/band_db_test"
      
      - name: Run integration tests
        run: |
          # Run integration tests
          echo "Running integration tests..."
          mix test --include db --exclude e2e
        env:
          MIX_ENV: test
          DATABASE_URL: "ecto://postgres:postgres@localhost/band_db_test"
      
      - name: Install Chrome and ChromeDriver for E2E tests
        run: |
          # Install Chrome
          sudo wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          
          # Install ChromeDriver using Chrome for Testing API
          CHROME_VERSION=$(google-chrome --version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+')
          CHROMEDRIVER_URL=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json" | \
            jq -r ".versions[] | select(.version==\"$CHROME_VERSION\") | .downloads.chromedriver[] | select(.platform==\"linux64\") | .url")
          
          if [ -z "$CHROMEDRIVER_URL" ]; then
            echo "No matching ChromeDriver found for Chrome $CHROME_VERSION, using latest stable"
            CHROMEDRIVER_URL=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions.json" | \
              jq -r ".channels.Stable.downloads.chromedriver[] | select(.platform==\"linux64\") | .url")
          fi
          
          wget -O /tmp/chromedriver.zip "$CHROMEDRIVER_URL"
          unzip /tmp/chromedriver.zip -d /tmp
          sudo mv /tmp/chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
          sudo chmod +x /usr/local/bin/chromedriver
          
          # Verify installation
          google-chrome --version
          chromedriver --version
      
      - name: Run E2E tests
        run: |
          # Run E2E tests with Chrome in headless mode
          echo "Running E2E tests..."
          WALLABY_SERVER=true mix test.e2e
        env:
          MIX_ENV: test
          DATABASE_URL: "ecto://postgres:postgres@localhost/band_db_test" 